{
  "service": {
    "service": "portaldofranqueadoapi",
    "serviceObject": {
      "name": "portaldofranqueadoapi"
    },
    "provider": {
      "name": "aws",
      "runtime": "dotnetcore3.1",
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-Login"
            }
          },
          "GetNoClosedCollecctionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetNoClosedCollecctions"
            }
          },
          "GetAllCollecctionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetAllCollecctions"
            }
          },
          "GetCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetCollecction"
            }
          },
          "GetOpenedCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetOpenedCollecction"
            }
          },
          "InsertCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-InsertCollecction"
            }
          },
          "DeleteCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-DeleteCollecction"
            }
          },
          "ChangeStatusCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-ChangeStatusCollecction"
            }
          },
          "UpdateCollecctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-UpdateCollecction"
            }
          },
          "GetFamiliesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetFamilies"
            }
          },
          "GetFamiliesWithSizesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetFamiliesWithSizes"
            }
          },
          "GetMainInformationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetMainInformations"
            }
          },
          "GetMainBasicInfosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetMainBasicInfos"
            }
          },
          "GetInformativeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetInformative"
            }
          },
          "GetGoogleDriveScretsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetGoogleDriveScrets"
            }
          },
          "GetFolderIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetFolderId"
            }
          },
          "UpdateInformativeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-UpdateInformative"
            }
          },
          "GetProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetProducts"
            }
          },
          "InsertProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-InsertProduct"
            }
          },
          "DeleteProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-DeleteProduct"
            }
          },
          "UpdateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-UpdateProduct"
            }
          },
          "SavePurchaseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-SavePurchase"
            }
          },
          "GetPurchaseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetPurchase"
            }
          },
          "GetPurchasesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetPurchases"
            }
          },
          "ReversePurchaseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-ReversePurchase"
            }
          },
          "GetStoresLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetStores"
            }
          },
          "GetStoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/portaldofranqueadoapi-dev-GetStore"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "portaldofranqueadoapi",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/portaldofranqueadoapi-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/portaldofranqueadoapi-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "portaldofranqueadoapi",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/Login.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersAccountController::Authenticate",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-Login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "GetNoClosedCollecctionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetNoClosedCollecctions.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetNoClosed",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetNoClosedCollecctions",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNoClosedCollecctionsLogGroup"
            ]
          },
          "GetAllCollecctionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetAllCollecctions.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetAll",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetAllCollecctions",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllCollecctionsLogGroup"
            ]
          },
          "GetCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Get",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCollecctionLogGroup"
            ]
          },
          "GetOpenedCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetOpenedCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetOpened",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetOpenedCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOpenedCollecctionLogGroup"
            ]
          },
          "InsertCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/InsertCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Insert",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-InsertCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InsertCollecctionLogGroup"
            ]
          },
          "DeleteCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/DeleteCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Delete",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-DeleteCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCollecctionLogGroup"
            ]
          },
          "ChangeStatusCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/ChangeStatusCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::UpdateStatus",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-ChangeStatusCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangeStatusCollecctionLogGroup"
            ]
          },
          "UpdateCollecctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/UpdateCollecction.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Update",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-UpdateCollecction",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCollecctionLogGroup"
            ]
          },
          "GetFamiliesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetFamilies.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersFamilyController::GetFamilies",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetFamilies",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFamiliesLogGroup"
            ]
          },
          "GetFamiliesWithSizesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetFamiliesWithSizes.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersFamilyController::GetFamiliesWithSizes",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetFamiliesWithSizes",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFamiliesWithSizesLogGroup"
            ]
          },
          "GetMainInformationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetMainInformations.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetMainInformations",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetMainInformations",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMainInformationsLogGroup"
            ]
          },
          "GetMainBasicInfosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetMainBasicInfos.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetMainBasicInfos",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetMainBasicInfos",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMainBasicInfosLogGroup"
            ]
          },
          "GetInformativeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetInformative.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetInformative",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetInformative",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetInformativeLogGroup"
            ]
          },
          "GetGoogleDriveScretsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetGoogleDriveScrets.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetGoogleDriveScrets",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetGoogleDriveScrets",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetGoogleDriveScretsLogGroup"
            ]
          },
          "GetFolderIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetFolderId.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetFolderId",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetFolderId",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFolderIdLogGroup"
            ]
          },
          "UpdateInformativeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/UpdateInformative.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::UpdateInformative",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-UpdateInformative",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateInformativeLogGroup"
            ]
          },
          "GetProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetProducts.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::GetProducts",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsLogGroup"
            ]
          },
          "InsertProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/InsertProduct.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Insert",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-InsertProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InsertProductLogGroup"
            ]
          },
          "DeleteProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/DeleteProduct.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Delete",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-DeleteProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProductLogGroup"
            ]
          },
          "UpdateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/UpdateProduct.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Update",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-UpdateProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProductLogGroup"
            ]
          },
          "SavePurchaseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/SavePurchase.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Save",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-SavePurchase",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SavePurchaseLogGroup"
            ]
          },
          "GetPurchaseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetPurchase.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Get",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetPurchase",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPurchaseLogGroup"
            ]
          },
          "GetPurchasesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetPurchases.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::GetPurchases",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetPurchases",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPurchasesLogGroup"
            ]
          },
          "ReversePurchaseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/ReversePurchase.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Reverse",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-ReversePurchase",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReversePurchaseLogGroup"
            ]
          },
          "GetStoresLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/GetStores.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersStoreController::GetStores",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetStores",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetStoresLogGroup"
            ]
          },
          "GetStoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z/bin/Release/net6.0/api.zip"
              },
              "Handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersStoreController::Get",
              "Runtime": "dotnetcore3.1",
              "FunctionName": "portaldofranqueadoapi-dev-GetStore",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetStoreLogGroup"
            ]
          },
          "GetStoreLambdaVersionmxp2GD9WufTF16DmDkDrINnPa9JOGFQCkOtdDDw0k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetStoreLambdaFunction"
              },
              "CodeSha256": "VZs9EKFUipDTa4l3SxTtGlcAa8KyzsfgE+ZPxzJ/vyA="
            }
          },
          "LoginLambdaVersion6rJeGqEwpB2ggvDtj6IahLv6VmSlUmqFzshgP25ys": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetNoClosedCollecctionsLambdaVersionC3AieIMc6PA2qZM65oPWHPAKCs8mXD2HTiwHDzxkO4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNoClosedCollecctionsLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetAllCollecctionsLambdaVersion79PpCS7FVJSnzgsPioVfXmPLfp5SoxUH7AirHO9cHs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllCollecctionsLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetOpenedCollecctionLambdaVersionXMnqyju5oneEMuXL8cfF3vbZuDyNg50DKJdv44sFUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOpenedCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetCollecctionLambdaVersionphSQPjrKswdwCOSNk9cYUVkyvxqtNw6Oar4KTFSxA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "DeleteCollecctionLambdaVersionFdhQvk4QFHxwvcrnHaQYxmsGQE8seZWNN32SYeSA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "ChangeStatusCollecctionLambdaVersion2ShNvDj99HVNqmg8B0J6INcCg2js3fLLQ8X6HazV1U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeStatusCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "InsertCollecctionLambdaVersiony04j54lGy3BPZMZ5d9tIfgWPHy5sLKcBXmQNro3jw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InsertCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "UpdateCollecctionLambdaVersionKQWlXcPL4YwRmwIPtedtCshjalfUK5gVWXLTTHRBY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCollecctionLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetFamiliesWithSizesLambdaVersioniD8vp3wNnJMf7pkBTCgbGdrT4NgdxNFyuCDZRKb58o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFamiliesWithSizesLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetFamiliesLambdaVersion3FZrB6pqbUEXeTcxpbO9IhyRjGQd1EpT3EeJthS8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFamiliesLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetMainInformationsLambdaVersionpLDl8mCuVuKquBili2mJ3LPOqHJKkIlp5smxOcOrrKE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMainInformationsLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetMainBasicInfosLambdaVersionegJJPjKETBz2mZ9gQwIRiGe7BRlCOpxUyypM7MKgK8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMainBasicInfosLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetGoogleDriveScretsLambdaVersionOu6jXJ4GHl2SteFb6q7RJc3rKR2YtVGJ1j3w58UU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetGoogleDriveScretsLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetInformativeLambdaVersionC9mKSBCRsUo2ODoxoprShc743QJ3ZuNXwMEgpAY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInformativeLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetFolderIdLambdaVersionfy7zoCWZBQuf4ApYQErRUDAUcPvB0uYVyNbxVtyT7Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFolderIdLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "UpdateInformativeLambdaVersionjEk9uNtDj40rxUxZxrBOk3YnRbrzqABR3GMf6JwBKpI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateInformativeLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetProductsLambdaVersionEp1yHUhMKjk1inAbp3Pgr5qhtDGUC437QDyMXNbRDa4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "InsertProductLambdaVersionVGsucJtsd4om1J0LlPQi82Swh4znkrKe4LI4mgtNRo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InsertProductLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "DeleteProductLambdaVersion2cDE3m1u3pG2ZNtmY5DCL41XFxAbpk6JA3pOA7iU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProductLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "UpdateProductLambdaVersion2q1eTwzRwcGjwrgVgahlepwq6LkwwI7PWWaDAdINc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProductLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "SavePurchaseLambdaVersionAspyii4iVmuFmbuD9otoR5QFZpd99iewXuOno7MLQUg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SavePurchaseLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetPurchasesLambdaVersion3MqTFK0TD5HlSxPnsl3jzy24sgKEKYZrwOxPblK93s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPurchasesLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetPurchaseLambdaVersionT6VsnITcRryWSwZb9xnBY25dChcShNkKmG0BJ0OkVWA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPurchaseLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "ReversePurchaseLambdaVersion8fCRMzUdVTFEdwENOS5qqz0EFmfYi07Iqxxv1hVScw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReversePurchaseLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "GetStoresLambdaVersionDdrkBzQ9na5a4r9ejI3LhT2qfqvtKSsdfvCBe88ISg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetStoresLambdaFunction"
              },
              "CodeSha256": "bhe5wiHetVaSWmblFGhoS3Dk2P5Rr74FP0dxebkSjL4="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-portaldofranqueadoapi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostApiAccountLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/account/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "GetNoClosedCollecctionsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNoClosedCollecctionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetNoClosedCollecctions": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetNoClosedCollecctionsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiCollectionsNoclosed": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/collections/noclosed",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetNoClosedCollecctions"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetNoClosedCollecctions"
          },
          "GetAllCollecctionsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllCollecctionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllCollecctions": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllCollecctionsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiCollectionsAll": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/collections/all",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllCollecctions"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllCollecctions"
          },
          "GetCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiCollectionsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/collections/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCollecction"
          },
          "GetOpenedCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOpenedCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOpenedCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOpenedCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiCollectionsOpened": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/collections/opened",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOpenedCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOpenedCollecction"
          },
          "InsertCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InsertCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationInsertCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InsertCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostApiCollections": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/collections",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationInsertCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationInsertCollecction"
          },
          "DeleteCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteDeleteApiCollectionsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/collections/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCollecction"
          },
          "ChangeStatusCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeStatusCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationChangeStatusCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ChangeStatusCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiCollectionsChangestatusIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/collections/changestatus/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationChangeStatusCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationChangeStatusCollecction"
          },
          "UpdateCollecctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCollecctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCollecction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCollecctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiCollectionsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/collections/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCollecction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCollecction"
          },
          "GetFamiliesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFamiliesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFamilies": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFamiliesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiFamilyAll": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/family/all",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFamilies"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFamilies"
          },
          "GetFamiliesWithSizesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFamiliesWithSizesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFamiliesWithSizes": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFamiliesWithSizesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiFamilyAllWithsizes": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/family/all/withsizes",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFamiliesWithSizes"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFamiliesWithSizes"
          },
          "GetMainInformationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMainInformationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMainInformations": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetMainInformationsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiMainInfo": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/main/info",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMainInformations"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMainInformations"
          },
          "GetMainBasicInfosLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMainBasicInfosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMainBasicInfos": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetMainBasicInfosLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiMainInfoBasic": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/main/info/basic",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMainBasicInfos"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMainBasicInfos"
          },
          "GetInformativeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInformativeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetInformative": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetInformativeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiMainInformative": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/main/informative",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetInformative"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetInformative"
          },
          "GetGoogleDriveScretsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetGoogleDriveScretsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetGoogleDriveScrets": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetGoogleDriveScretsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiMainGoogledrive": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/main/googledrive",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetGoogleDriveScrets"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetGoogleDriveScrets"
          },
          "GetFolderIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFolderIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFolderId": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFolderIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiMainFolderidFoldertypeVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/main/folderid/{folderType}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFolderId"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFolderId"
          },
          "UpdateInformativeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateInformativeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateInformative": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateInformativeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiMainInformative": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/main/informative",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateInformative"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateInformative"
          },
          "GetProductsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProducts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProductsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiProductCollectionidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/product/{collectionId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProducts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProducts"
          },
          "InsertProductLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InsertProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationInsertProduct": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InsertProductLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostApiProductCollectionidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/product/{collectionId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationInsertProduct"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationInsertProduct"
          },
          "DeleteProductLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteProduct": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteProductLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteDeleteApiProductIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/product/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteProduct"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteProduct"
          },
          "UpdateProductLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateProduct": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateProductLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiProduct": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/product",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateProduct"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateProduct"
          },
          "SavePurchaseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SavePurchaseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSavePurchase": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SavePurchaseLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiPurchase": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/purchase",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSavePurchase"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSavePurchase"
          },
          "GetPurchaseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPurchaseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetPurchase": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPurchaseLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiPurchaseCollectionCollectionidVarStoreidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/purchase/collection/{collectionId}/{storeId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetPurchase"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetPurchase"
          },
          "HttpApiRouteGetApiPurchaseIdPurchaseidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/purchase/id/{purchaseId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetPurchase"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetPurchase"
          },
          "GetPurchasesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPurchasesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetPurchases": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPurchasesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiPurchaseCollectionCollectionidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/purchase/collection/{collectionId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetPurchases"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetPurchases"
          },
          "ReversePurchaseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReversePurchaseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReversePurchase": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReversePurchaseLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiPurchaseReverse": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/purchase/reverse",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReversePurchase"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationReversePurchase"
          },
          "GetStoresLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetStoresLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetStores": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetStoresLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiStoreAll": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/store/all",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetStores"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetStores"
          },
          "GetStoreLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetStoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetStore": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetStoreLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiStoreIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/store/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetStore"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetStore"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetStoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetStoreLambdaVersionmxp2GD9WufTF16DmDkDrINnPa9JOGFQCkOtdDDw0k"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetStoreLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersion6rJeGqEwpB2ggvDtj6IahLv6VmSlUmqFzshgP25ys"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "GetNoClosedCollecctionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNoClosedCollecctionsLambdaVersionC3AieIMc6PA2qZM65oPWHPAKCs8mXD2HTiwHDzxkO4"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetNoClosedCollecctionsLambdaFunctionQualifiedArn"
            }
          },
          "GetAllCollecctionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllCollecctionsLambdaVersion79PpCS7FVJSnzgsPioVfXmPLfp5SoxUH7AirHO9cHs"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetAllCollecctionsLambdaFunctionQualifiedArn"
            }
          },
          "GetOpenedCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOpenedCollecctionLambdaVersionXMnqyju5oneEMuXL8cfF3vbZuDyNg50DKJdv44sFUA"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetOpenedCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "GetCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCollecctionLambdaVersionphSQPjrKswdwCOSNk9cYUVkyvxqtNw6Oar4KTFSxA"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCollecctionLambdaVersionFdhQvk4QFHxwvcrnHaQYxmsGQE8seZWNN32SYeSA"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-DeleteCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "ChangeStatusCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeStatusCollecctionLambdaVersion2ShNvDj99HVNqmg8B0J6INcCg2js3fLLQ8X6HazV1U"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-ChangeStatusCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "InsertCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InsertCollecctionLambdaVersiony04j54lGy3BPZMZ5d9tIfgWPHy5sLKcBXmQNro3jw"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-InsertCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCollecctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCollecctionLambdaVersionKQWlXcPL4YwRmwIPtedtCshjalfUK5gVWXLTTHRBY"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-UpdateCollecctionLambdaFunctionQualifiedArn"
            }
          },
          "GetFamiliesWithSizesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFamiliesWithSizesLambdaVersioniD8vp3wNnJMf7pkBTCgbGdrT4NgdxNFyuCDZRKb58o"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetFamiliesWithSizesLambdaFunctionQualifiedArn"
            }
          },
          "GetFamiliesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFamiliesLambdaVersion3FZrB6pqbUEXeTcxpbO9IhyRjGQd1EpT3EeJthS8"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetFamiliesLambdaFunctionQualifiedArn"
            }
          },
          "GetMainInformationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMainInformationsLambdaVersionpLDl8mCuVuKquBili2mJ3LPOqHJKkIlp5smxOcOrrKE"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetMainInformationsLambdaFunctionQualifiedArn"
            }
          },
          "GetMainBasicInfosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMainBasicInfosLambdaVersionegJJPjKETBz2mZ9gQwIRiGe7BRlCOpxUyypM7MKgK8"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetMainBasicInfosLambdaFunctionQualifiedArn"
            }
          },
          "GetGoogleDriveScretsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetGoogleDriveScretsLambdaVersionOu6jXJ4GHl2SteFb6q7RJc3rKR2YtVGJ1j3w58UU"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetGoogleDriveScretsLambdaFunctionQualifiedArn"
            }
          },
          "GetInformativeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInformativeLambdaVersionC9mKSBCRsUo2ODoxoprShc743QJ3ZuNXwMEgpAY"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetInformativeLambdaFunctionQualifiedArn"
            }
          },
          "GetFolderIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFolderIdLambdaVersionfy7zoCWZBQuf4ApYQErRUDAUcPvB0uYVyNbxVtyT7Q"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetFolderIdLambdaFunctionQualifiedArn"
            }
          },
          "UpdateInformativeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateInformativeLambdaVersionjEk9uNtDj40rxUxZxrBOk3YnRbrzqABR3GMf6JwBKpI"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-UpdateInformativeLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsLambdaVersionEp1yHUhMKjk1inAbp3Pgr5qhtDGUC437QDyMXNbRDa4"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetProductsLambdaFunctionQualifiedArn"
            }
          },
          "InsertProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InsertProductLambdaVersionVGsucJtsd4om1J0LlPQi82Swh4znkrKe4LI4mgtNRo"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-InsertProductLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProductLambdaVersion2cDE3m1u3pG2ZNtmY5DCL41XFxAbpk6JA3pOA7iU"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-DeleteProductLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProductLambdaVersion2q1eTwzRwcGjwrgVgahlepwq6LkwwI7PWWaDAdINc"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-UpdateProductLambdaFunctionQualifiedArn"
            }
          },
          "SavePurchaseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SavePurchaseLambdaVersionAspyii4iVmuFmbuD9otoR5QFZpd99iewXuOno7MLQUg"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-SavePurchaseLambdaFunctionQualifiedArn"
            }
          },
          "GetPurchasesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPurchasesLambdaVersion3MqTFK0TD5HlSxPnsl3jzy24sgKEKYZrwOxPblK93s"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetPurchasesLambdaFunctionQualifiedArn"
            }
          },
          "GetPurchaseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPurchaseLambdaVersionT6VsnITcRryWSwZb9xnBY25dChcShNkKmG0BJ0OkVWA"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetPurchaseLambdaFunctionQualifiedArn"
            }
          },
          "ReversePurchaseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReversePurchaseLambdaVersion8fCRMzUdVTFEdwENOS5qqz0EFmfYi07Iqxxv1hVScw"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-ReversePurchaseLambdaFunctionQualifiedArn"
            }
          },
          "GetStoresLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetStoresLambdaVersionDdrkBzQ9na5a4r9ejI3LhT2qfqvtKSsdfvCBe88ISg"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-GetStoresLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-portaldofranqueadoapi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "Login": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersAccountController::Authenticate",
        "events": [
          {
            "httpApi": {
              "path": "/api/account/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/account/login"
          }
        ],
        "name": "portaldofranqueadoapi-dev-Login",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\Login.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersion6rJeGqEwpB2ggvDtj6IahLv6VmSlUmqFzshgP25ys"
      },
      "GetNoClosedCollecctions": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetNoClosed",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/noclosed",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/collections/noclosed"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetNoClosedCollecctions",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetNoClosedCollecctions.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetNoClosedCollecctionsLambdaVersionC3AieIMc6PA2qZM65oPWHPAKCs8mXD2HTiwHDzxkO4"
      },
      "GetAllCollecctions": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetAll",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/all",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/collections/all"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetAllCollecctions",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetAllCollecctions.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetAllCollecctionsLambdaVersion79PpCS7FVJSnzgsPioVfXmPLfp5SoxUH7AirHO9cHs"
      },
      "GetCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Get",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/collections/{id}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetCollecctionLambdaVersionphSQPjrKswdwCOSNk9cYUVkyvxqtNw6Oar4KTFSxA"
      },
      "GetOpenedCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::GetOpened",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/opened",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/collections/opened"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetOpenedCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetOpenedCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetOpenedCollecctionLambdaVersionXMnqyju5oneEMuXL8cfF3vbZuDyNg50DKJdv44sFUA"
      },
      "InsertCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Insert",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/collections"
          }
        ],
        "name": "portaldofranqueadoapi-dev-InsertCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\InsertCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "InsertCollecctionLambdaVersiony04j54lGy3BPZMZ5d9tIfgWPHy5sLKcBXmQNro3jw"
      },
      "DeleteCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Delete",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/collections/{id}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-DeleteCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\DeleteCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "DeleteCollecctionLambdaVersionFdhQvk4QFHxwvcrnHaQYxmsGQE8seZWNN32SYeSA"
      },
      "ChangeStatusCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::UpdateStatus",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/changestatus/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/collections/changestatus/{id}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-ChangeStatusCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\ChangeStatusCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "ChangeStatusCollecctionLambdaVersion2ShNvDj99HVNqmg8B0J6INcCg2js3fLLQ8X6HazV1U"
      },
      "UpdateCollecction": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersCollectionsController::Update",
        "events": [
          {
            "httpApi": {
              "path": "/api/collections/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/collections/{id}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-UpdateCollecction",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\UpdateCollecction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "UpdateCollecctionLambdaVersionKQWlXcPL4YwRmwIPtedtCshjalfUK5gVWXLTTHRBY"
      },
      "GetFamilies": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersFamilyController::GetFamilies",
        "events": [
          {
            "httpApi": {
              "path": "/api/family/all",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/family/all"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetFamilies",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetFamilies.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetFamiliesLambdaVersion3FZrB6pqbUEXeTcxpbO9IhyRjGQd1EpT3EeJthS8"
      },
      "GetFamiliesWithSizes": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersFamilyController::GetFamiliesWithSizes",
        "events": [
          {
            "httpApi": {
              "path": "/api/family/all/withsizes",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/family/all/withsizes"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetFamiliesWithSizes",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetFamiliesWithSizes.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetFamiliesWithSizesLambdaVersioniD8vp3wNnJMf7pkBTCgbGdrT4NgdxNFyuCDZRKb58o"
      },
      "GetMainInformations": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetMainInformations",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/info",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/main/info"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetMainInformations",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetMainInformations.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetMainInformationsLambdaVersionpLDl8mCuVuKquBili2mJ3LPOqHJKkIlp5smxOcOrrKE"
      },
      "GetMainBasicInfos": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetMainBasicInfos",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/info/basic",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/main/info/basic"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetMainBasicInfos",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetMainBasicInfos.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetMainBasicInfosLambdaVersionegJJPjKETBz2mZ9gQwIRiGe7BRlCOpxUyypM7MKgK8"
      },
      "GetInformative": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetInformative",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/informative",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/main/informative"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetInformative",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetInformative.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetInformativeLambdaVersionC9mKSBCRsUo2ODoxoprShc743QJ3ZuNXwMEgpAY"
      },
      "GetGoogleDriveScrets": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetGoogleDriveScrets",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/googledrive",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/main/googledrive"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetGoogleDriveScrets",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetGoogleDriveScrets.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetGoogleDriveScretsLambdaVersionOu6jXJ4GHl2SteFb6q7RJc3rKR2YtVGJ1j3w58UU"
      },
      "GetFolderId": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::GetFolderId",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/folderid/{folderType}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/main/folderid/{folderType}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetFolderId",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetFolderId.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetFolderIdLambdaVersionfy7zoCWZBQuf4ApYQErRUDAUcPvB0uYVyNbxVtyT7Q"
      },
      "UpdateInformative": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersMainScreenController::UpdateInformative",
        "events": [
          {
            "httpApi": {
              "path": "/api/main/informative",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/main/informative"
          }
        ],
        "name": "portaldofranqueadoapi-dev-UpdateInformative",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\UpdateInformative.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "UpdateInformativeLambdaVersionjEk9uNtDj40rxUxZxrBOk3YnRbrzqABR3GMf6JwBKpI"
      },
      "GetProducts": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::GetProducts",
        "events": [
          {
            "httpApi": {
              "path": "/api/product/{collectionId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/product/{collectionId}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetProducts",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetProducts.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetProductsLambdaVersionEp1yHUhMKjk1inAbp3Pgr5qhtDGUC437QDyMXNbRDa4"
      },
      "InsertProduct": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Insert",
        "events": [
          {
            "httpApi": {
              "path": "/api/product/{collectionId}",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/product/{collectionId}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-InsertProduct",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\InsertProduct.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "InsertProductLambdaVersionVGsucJtsd4om1J0LlPQi82Swh4znkrKe4LI4mgtNRo"
      },
      "DeleteProduct": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Delete",
        "events": [
          {
            "httpApi": {
              "path": "/api/product/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/product/{id}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-DeleteProduct",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\DeleteProduct.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "DeleteProductLambdaVersion2cDE3m1u3pG2ZNtmY5DCL41XFxAbpk6JA3pOA7iU"
      },
      "UpdateProduct": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersProductController::Update",
        "events": [
          {
            "httpApi": {
              "path": "/api/product",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/product"
          }
        ],
        "name": "portaldofranqueadoapi-dev-UpdateProduct",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\UpdateProduct.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "UpdateProductLambdaVersion2q1eTwzRwcGjwrgVgahlepwq6LkwwI7PWWaDAdINc"
      },
      "SavePurchase": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Save",
        "events": [
          {
            "httpApi": {
              "path": "/api/purchase",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/purchase"
          }
        ],
        "name": "portaldofranqueadoapi-dev-SavePurchase",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\SavePurchase.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "SavePurchaseLambdaVersionAspyii4iVmuFmbuD9otoR5QFZpd99iewXuOno7MLQUg"
      },
      "GetPurchase": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Get",
        "events": [
          {
            "httpApi": {
              "path": "/api/purchase/collection/{collectionId}/{storeId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/purchase/collection/{collectionId}/{storeId}"
          },
          {
            "httpApi": {
              "path": "/api/purchase/id/{purchaseId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/purchase/id/{purchaseId}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetPurchase",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetPurchase.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetPurchaseLambdaVersionT6VsnITcRryWSwZb9xnBY25dChcShNkKmG0BJ0OkVWA"
      },
      "GetPurchases": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::GetPurchases",
        "events": [
          {
            "httpApi": {
              "path": "/api/purchase/collection/{collectionId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/purchase/collection/{collectionId}"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetPurchases",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetPurchases.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetPurchasesLambdaVersion3MqTFK0TD5HlSxPnsl3jzy24sgKEKYZrwOxPblK93s"
      },
      "ReversePurchase": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersPurchaseController::Reverse",
        "events": [
          {
            "httpApi": {
              "path": "/api/purchase/reverse",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/purchase/reverse"
          }
        ],
        "name": "portaldofranqueadoapi-dev-ReversePurchase",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\ReversePurchase.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "ReversePurchaseLambdaVersion8fCRMzUdVTFEdwENOS5qqz0EFmfYi07Iqxxv1hVScw"
      },
      "GetStores": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersStoreController::GetStores",
        "events": [
          {
            "httpApi": {
              "path": "/api/store/all",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/store/all"
          }
        ],
        "name": "portaldofranqueadoapi-dev-GetStores",
        "package": {
          "artifact": "D:\\Source\\Brothers\\PortalFranqueado\\PortalDoFranqueadoAWSAPI\\.serverless\\GetStores.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetStoresLambdaVersionDdrkBzQ9na5a4r9ejI3LhT2qfqvtKSsdfvCBe88ISg"
      },
      "GetStore": {
        "handler": "PortalDoFranqueadoAPICore::PortalDoFranqueadoAPICore.ControllersStoreController::Get",
        "events": [
          {
            "httpApi": {
              "path": "/api/store/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/store/{id}"
          }
        ],
        "package": {
          "artifact": "bin/Release/net6.0/api.zip"
        },
        "name": "portaldofranqueadoapi-dev-GetStore",
        "memory": 1024,
        "timeout": 6,
        "runtime": "dotnetcore3.1",
        "vpc": {},
        "versionLogicalId": "GetStoreLambdaVersionmxp2GD9WufTF16DmDkDrINnPa9JOGFQCkOtdDDw0k"
      }
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "portaldofranqueadoapi",
      "frameworkVersion": "3",
      "configValidationMode": "error",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "artifactDirectoryName": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/portaldofranqueadoapi/dev/1644183251828-2022-02-06T21:34:11.828Z",
    "artifact": ""
  }
}